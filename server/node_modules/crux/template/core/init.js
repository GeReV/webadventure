/**
 * Starts the framework
 * Executed by ./core/start
 */

// These are values that are set when interacting with the
// `crux migrate` commands
var CORE_ONLY =!! global._coreOnly_;
var FORCE_VERBOSE =!! global._forceVerbose_;

var VERBOSE_LOGGING = false;

var path = require('path');
var util = require('util');

var BASE_PATH = path.dirname(__dirname) + '/';

// Build the main framework namespace
global.$ = {
	
	// Define path constants
	BASE_PATH:        BASE_PATH,
	CORE_PATH:        BASE_PATH + 'core/',
	MODEL_PATH:       BASE_PATH + 'models/',
	VIEW_PATH:        BASE_PATH + 'views/',
	CONTROLLER_PATH:  BASE_PATH + 'controllers/',
	LIB_PATH:         BASE_PATH + 'libraries/',
	PLUGIN_PATH:      BASE_PATH + 'plugins/',
	PUBLIC_PATH:      BASE_PATH + 'public/',
	CONFIG_PATH:      BASE_PATH + 'config/',
	
	// Filename constants
	VIEW_EXT:         '.ejs',
	CONFIG_EXT:       '.json',
	
	log: (function() {
		var log = function() {
			if (! CORE_ONLY || _forceVerbose_) {
				return console.log.apply(console, arguments);
			}
		};
		log.indented = function(indent, value) {
			if (typeof indent === 'number') {
				indent = Array(indent + 1).join(' ');
			}
			value = util.format(value);
			value = indent + value.split('\n').join('\n' + indent);
			log(value);
		};
		log.message = function(value) {
			log('> ' + value);
		};
		log.verbose = function() {
			if (VERBOSE_LOGGING) {
				console.log.apply(this, arguments);
			}
		};
		log.verbose.indented = function() {
			if (VERBOSE_LOGGING) {
				log.indented.apply(this, arguments);
			}
		};
		log.verbose.message = function() {
			if (VERBOSE_LOGGING) {
				log.message.apply(this, arguments);
			}
		};
		return log;
	}()),
	
	// Namespace constructor
	_init: function() {
		$.log.message('Initializing framework...');
		$._core.load('config', true);
		$._core.load('views', true);
		$._core.load('libs', true);
		$._core.load('models', true);
		$._core.load('controllers');
		// This is startup code, not run in core-only mode
		if (! CORE_ONLY) {
			$._core.load('servers');
			// From this point on, catch all errors
			process.on('uncaughtException', function(err) {
				// Handle thrown http errors
				if (err instanceof $._core.servers.RequestHandle.HttpError) {
					err.handle.raiseHttpError(err.status, err.message);
				}
				// Log other errors
				else {
					if (typeof err === 'object' && err && err.stack) {
						$.log(err.stack);
					} else {
						$.log(err);
					}
				}
			});
			// Start the plugin manager
			$._core.load('plugins', true);
			$.plugins._init();
		}
	},
	
	// Internal core module loader
	_core: {
		load: function(lib, expose) {
			if (! $._core.hasOwnProperty(lib)) {
				$.log.verbose.message('Loading core module "' + lib + '"');
				$._core[lib] = require($.CORE_PATH + lib);
			}
			if (expose) {
				$[lib] = $._core[lib];
			}
		}
	}
	
};

// Start running...
$._init();

/* End of file init.js */
/* Location: ./core/init.js */
