/**
 * Plugin manager
 */

var async = require('async');

module.exports = (function() {
	var plugins = { };
	
	var storage = {
		"init":     [ ],
		"request":  [ ]
	};
	
	var enabled = [ ];
	
	var current = null;
	
	plugins.bind = function(type, callback) {
		// To allow creation of new plugin types on the fly
		storage[type] = storage[type] || [ ];
		// Add the plugin to the list
		storage[type].push([current, callback]);
	};
	
	plugins._init = function() {
		// Load plugins in the config file
		$.config.loadSync('plugins');
		var conf = $.config.item('plugins');
		for (var i in conf) {
			if (conf.hasOwnProperty(i) && conf[i]) {
				current = i;
				enabled.push(i);
				require($.PLUGIN_PATH + i);
			}
		}
		// Run the init type
		plugins._invoke('init');
	};
	
	plugins._invoke = function(type, args, callback) {
		args = args || [ ];
		async.series(storage[type].map(function(plugin) {
			return function(done) {
				var _args = [done].concat(args);
				if (type === 'request') {
					$.log.verbose.indented(2, 'Running plugin ' + plugin[0]);
				} else {
					$.log.verbose('Running plugin ' + plugin[0]);
				}
				plugin[1].apply(global, _args);
			};
		}), callback);
	};
	
	plugins.enabled = function(plugin) {
		return (enabled.indexOf(plugin) > -1);
	};
	
	return plugins;
}());

/* End of file plugins.js */
/* Location: ./core/plugins.js */
