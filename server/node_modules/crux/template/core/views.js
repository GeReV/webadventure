/**
 * View file manager
 */

var fs    = require('fs');
var ejs   = require('ejs');

module.exports = (function() {
	var views = { };
	var store = { };
	
	views.load = function(handle, view, data, forceFresh, after) {
		if (arguments.length === 2) {
			after = data;
			data = { };
			forceFresh = false;
		}
		if (typeof forceFresh === 'function') {
			after = forceFresh;
			forceFresh = false;
		}
		if (forceFresh) {
			store[view] = null;
		}
		lookup(view, function(content) {
			after(content ? render(content, handle, data) : null);
		});
	};
	
	views.loadSync = function(handle, view, data, forceFresh) {
		data = data || { };
		if (forceFresh) {
			store[view] = null;
		}
		var content = lookupSync(view);
		return content ? render(content, handle, data) : null
	};
	
	function LocalData(data) {
		for (var i in data) {
			if (data.hasOwnProperty(i)) {
				this[i] = data[i];
			}
		}
		this._extend = function(extra) {
			var result = new LocalData(this);
			for (var i in extra) {
				if (extra.hasOwnProperty(i)) {
					result[i] = extra[i];
				}
			}
			return result;
		};
	}
	
	function render(body, handle, data) {
		data = new LocalData(data);
		data._locals = data;
		return ejs.render(body, {
			scope: handle,
			locals: data
		});
	}
	
	function lookup(view, after) {
		if (! store[view]) {
			$.log.verbose.message('Looking up view file "' + view + '"');
			var file = $.VIEW_PATH + view + $.VIEW_EXT;
			fs.readFile(file, function(err, data) {
				if (err) {
					return false;
				}
				store[view] = data.toString();
				after(store[view]);
			});
		} else {
			setTimeout(function() {
				after(store[view]);
			}, 0);
		}
	}
	
	function lookupSync(view) {
		if (! store[view]) {
			$.log.verbose.message('Looking up view file "' + view + '"');
			var file = $.VIEW_PATH + view + $.VIEW_EXT;
			try {
				store[view] = fs.readFileSync(file).toString();
			} catch (e) {
				return false;
			}
		}
		return store[view];
	}

	return views;
}());

/* End of file views.js */
/* Location: ./core/views.js */
