/**
 * A database module
 *
 * @author     James Brumond
 * @version    0.0.0
 * @copyright  Copyright 2011 James Brumond
 * @license    Dual licensed under MIT and GPL
 */

$.config.loadSync('db');
var DEBUG = $.config.item('db').debug;

// We borrow the escape/format functions from the mysql library
var _mysql = require('mysql').Client.prototype;
var escape = _mysql.escape;
var format = _mysql.format.bind(_mysql);

// Load the class interface
var Class = require('classes').Class;

/**
 * Shortcut to the DatabaseConnection constructor
 */
module.exports._connect = function(connection) {
	return new module.exports.DatabaseConnection(connection);
};

// Load in the pooling code which also acts as the main open/close interface
var pool = require('./pool');
module.exports.open       = pool.open;
module.exports.close      = pool.close;
module.exports.tableName  = pool.tableName;

var queries = require('./queries');

/**
 * Database connection class
 */
Class([module.exports, 'DatabaseConnection'], {
	
	_connection: null,
	_transaction: null,
	
	/**
	 * Constructor
	 *
	 * @access  public
	 * @param   string    engine type (eg. "mysql")
	 * @param   object    connection options
	 */
	construct: function(connection) {
		this._connection = connection;
	},
	
// ------------------------------------------------------------------
//  Transaction control methods (NOT native transactions)
	
	/**
	 * Start a transaction
	 *
	 * @access  public
	 * @return  void
	 */
	startTransaction: function() {
		if (this._transaction === null) {
			this._transaction = [ ];
		}
	},
	
	/**
	 * Commit the current transaction
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	commitTransaction: function(callback) {
		if (this._transaction) {
			var queue = this._transaction;
			this._transaction = null;
			transactionQuery(this, queue, callback);
		}
	},
	
	/**
	 * Rollback the current transaction
	 *
	 * @access  public
	 * @return  void
	 */
	rollbackTransaction: function() {
		this._transaction = null;
	},
	
	/**
	 * Transaction shortcut methods
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	runTransaction: function(callback) {
		var self = this;
		self.startTransaction();
		callback(
			function(callback) {
				self.commitTransaction(callback);
			},
			function() {
				self.rollbackTransaction();
			}
		);
	},

// ------------------------------------------------------------------
//  Query shortcut methods
	
	/**
	 * Run a database query
	 *
	 * @access  public
	 * @param   string    the query
	 * @param   array     query params
	 * @param   function  callback
	 * @param   string    result parser name
	 * @return  void
	 */
	query: function(query, params, callback, parser) {
		if (typeof params === 'function' || typeof callback === 'string') {
			parser = callback;
			callback = params;
			params = void(0);
		}
		if (params) {
			query = format(query, params);
		}
		if (this._transaction) {
			this._transaction.push([query, parser]);
		} else {
			if (parser) {
				parser = this._connection['_' + parser];
			}
			var after = parser ? function(err) {
				if (err) {
					callback.apply(this, arguments);
				} else {
					var args = Array.prototype.slice.call(arguments);
					args.shift();
					result = parser.apply(this._connection, args);
					callback(err, result, query);
				}
			} : callback;
			// Run the query
			if (DEBUG) {
				$.log('# [ ' + query + ' ]');
			}
			this._connection.query.call(this._connection, query, after);
		}
	},
	
	/**
	 * Select a database to query
	 *
	 * @access  public
	 * @param   string    the database
	 * @param   function  callback
	 * @return  void
	 */
	use: function(db, callback) {
		this.query('USE ' + db, callback, 'use');
	},
	
	/**
	 * Run a DESCRIBE query
	 *
	 * @access  public
	 * @param   string    the table
	 * @return  void
	 */
	describe: function(table, callback) {
		this.query('DESCRIBE ' + table, callback, 'describe');
	},
	
	/**
	 * Run a TRUNCATE query
	 *
	 * @access  public
	 * @param   string    table name
	 * @param   function  callback
	 * @return  void
	 */
	truncate: function(table, callback) {
		this.query('TRUNCATE ' + table, callback, 'truncate');
	},
	
	/**
	 * Fetch an array of all databases
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	showDatabases: function(callback) {
		this.query('SHOW DATABASES', callback, 'showDatabases');
	},
	
	/**
	 * Fetch an array of all tables in a database
	 *
	 * @access  public
	 * @param   string    database
	 * @param   function  callback
	 * @return  void
	 */
	showTablesIn: function(db, callback) {
		this.query('SHOW TABLES IN ' + db, callback, 'showTablesIn');
	},
	
	/**
	 * Runs a DROP TABLE query
	 *
	 * @access  public
	 * @param   string    the table name
	 * @return  void
	 */
	dropTable: function(table, callback) {
		this.query('DROP TABLE ' + table, callback, 'dropTable');
	},
	
	/**
	 * Run a SELECT query
	 *
	 * @access  public
	 * @param   mixed     the fields to select
	 * @return  object
	 */
	select: function(fields) {
		return new queries.SelectQuery(this, fields);
	},
	
	/**
	 * Runs an INSERT INTO query
	 *
	 * @access  public
	 * @param   string    the table name
	 * @return  object
	 */
	insertInto: function(table) {
		return new queries.InsertQuery(this, table);
	},
	
	/**
	 * Runs a CREATE TABLE query
	 *
	 * @access  public
	 * @param   string    the table name
	 * @param   object    new table columns
	 * @return  object
	 */
	createTable: function(table, columns) {
		return new queries.CreateTableQuery(this, table, columns);
	},
	
	/**
	 * Runs an ALTER TABLE query
	 *
	 * @access  public
	 * @param   string    the table name
	 * @return  object
	 */
	alterTable: function(table) {
		return new queries.AlterTableQuery(this, table);
	},
	
	/**
	 * Runs an UPDATE query
	 */
	update: function(table) {
		return new queries.UpdateQuery(this, table);
	},
	
	/**
	 * Runs a DELETE FROM query
	 */
	deleteFrom: function(table) {
		return new queries.DeleteFromQuery(this, table);
	}

});

// ------------------------------------------------------------------
//  Helpers

function transactionQuery(connection, queue, callback, results, queries) {
	results = results || [ ];
	queries = queries || [ ];
	var query = queue.shift();
	var after = function(err, result) {
		if (err) {
			callback(err, results, queries);
		} else {
			results.push(result);
			queries.push(query[0]);
			if (queue.length) {
				transactionQuery(connection, queue, callback, results, queries);
			} else {
				callback(null, results, queries);
			}
		}
	};
	var args = [ query[0], after ];
	if (query[1]) {
		args.push(query[1]);
	}
	connection.query.apply(connection, args);
}

/* End of file db.js */
/* Location: ./libraries/db/db.js */
