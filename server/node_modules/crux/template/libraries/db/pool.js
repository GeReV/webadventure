
// Load the configuration
$.config.loadSync('db');
var dbconf = $.config.item('db');

// Import the engine loader
var engines = require('./engines');
var connect = require('./db')._connect;

// Connection pool
var pool = {
	all: [ ],
	queue: [ ],
	add: function(conn) {
		pool.all.push(conn);
		pool.queue.push(conn);
	},
	checkout: function() {
		// Use an available connection
		if (pool.queue.length) {
			return pool.queue.shift();
		}
		// Create a new connection
		else if (pool.all.length < dbconf.pool.max_count) {
			pool.add(open());
			return pool.queue.shift();
		}
		// Recycle a connection (this is bad and should be avoided)
		else {
			// Move the recycled connection to the end of the list
			var conn = pool.all.shift();
			pool.all.push(conn);
			// Mark the connection as recycled to avoid it being prematurely queued
			conn._recycleCount = (conn._recycleCount || 0);
			conn._recycleCount++;
			
			return conn;
		}
	},
	checkin: function(conn) {
		// Make sure this is a valid connection
		if (pool.all.indexOf(conn) > -1) {
			// If the connection has been recycled, avoid early queueing
			if (conn._recycleCount) {
				conn._recycleCount--;
				if (conn._recycleCount) {return;}
			}
			// Queue the connection
			pool.queue.push(conn);
		}
	}
};

// Build the minimum number of connections
for (var i = 0; i < dbconf.pool.min_count; i++) {
	pool.add(open());
}

// Get a database connecion
exports.open = function() {
	return connect(pool.checkout());
};

// Check-in an open connection
exports.close = function(conn) {
	pool.checkin(conn._connection);
	conn._connection = null;
	conn.query = function() {
		throw 'Cannot run queries on a closed connection handle';
	};
};

// Prefix a table name
exports.tableName = function(table) {
	return dbconf.table_prefix + table;
};

// Actually open a connection
var dblib = require('./db');
function open() {
	var db = engines.load(dbconf.engine, {
		host: dbconf.host,
		port: dbconf.port,
		user: dbconf.username,
		password: dbconf.password,
		debug: (dbconf.debug === 2)
	});
	db.query('USE ' + dbconf.db_name, function(err) {
		if (err) {throw err;}
	});
	return db;
}

