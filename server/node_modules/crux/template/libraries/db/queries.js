var Class = require('classes').Class;

// We borrow the escape/format functions from the mysql library
var _mysql = require('mysql').Client.prototype;
var escape = _mysql.escape;
var format = _mysql.format.bind(_mysql);

/**
 * Builds CREATE TABLE queries
 */
Class([module.exports, 'CreateTableQuery'], {
	
	_connection: null,
	
	_tableName: null,
	_ifNotExists: false,
	_cols: null,
	_engine: null,
	
	construct: function(conn, table, definition) {
		this._connection = conn;
		this._tableName = table;
		if (definition) {
			this._cols = definition;
		}
	},
	
	ifNotExists: function(definition) {
		this._ifNotExists = true;
		this._cols = definition;
		return this;
	},
	
	engine: function(engine) {
		this._engine = engine;
		return this;
	},
	
	done: function(callback) {
		this._run(this._buildQuery(), callback);
	},
	
	_buildQuery: function() {
		var query = 'CREATE TABLE ';
		if (this._ifNotExists) {
			query += 'IF NOT EXISTS ';
		}
		query += this._tableName + ' (\n';
		var cols = buildCols(this._cols);
		if (cols.primary) {
			cols.cols.push('PRIMARY KEY (' + cols.primary + ')');
		}
		if (cols.foreigns.length) {
			cols.cols.push.apply(cols.cols, cols.foreigns);
		}
		query += '  ' + cols.cols.join(',\n  ') + '\n)';
		if (this._engine) {
			query += ' Engine=' + this._engine;
		}
		return query;
	},
	
	_run: function(query, callback) {
		this._connection.query(query, callback, 'createTable');
	}
	
});

// ------------------------------------------------------------------

/**
 * Builds ALTER TABLE queries
 */
Class([module.exports, 'AlterTableQuery'], {
	
	_connection: null,
	_tableName: null,
	
	construct: function(conn, table) {
		this._connection = conn;
		this._tableName = table;
	},
	
	addColumn: function(col, def, callback) {
		var obj = { };
		obj[col] = def;
		this._run('ALTER TABLE ' + this._tableName + ' ' + buildCols(col).cols[0] + '\n)', callback);
		return this;
	},
	
	_run: function(query, callback) {
		this._connection.query(query, callback, 'alterTable');
	}
	
});

// ------------------------------------------------------------------

/**
 * Builds SELECT queries
 */
Class([module.exports, 'SelectQuery'], {
	
	_connection: null,
	
	_table: null,
	_fields: null,
	_forInsert: null,
	_onDone: null,
	
	_whereClause: null,
	_orderByClause: null,
	_limitClause: null,
	
	/**
	 * Constructor
	 *
	 * @access  public
	 * @param   object    connection object
	 * @param   mixed     the fields to select
	 * @param   function  an optional replacement for done()
	 * @param   boolean   is this part of an insert query?
	 */
	construct: function(connection, fields, onDone, forInsert) {
		this._connection = connection;
		this._fields = (typeof fields === 'string') ? fields.split(',').map(trim) : fields;
		this._onDone = onDone || this._run;
		this._forInsert = forInsert;
	},
	
	/**
	 * Set the FROM clause
	 *
	 * @access  public
	 * @param   string    table
	 * @return  this
	 */
	from: function(table) {
		this._table = table;
		return this;
	},
	
	/**
	 * Set WHERE clause conditions
	 *
	 * @access  public
	 * @param   mixed     the conditions
	 * @return  this
	 */
	where: function(conditions) {
		this._whereClause = conditions;
		return this;
	},
	
	/**
	 * Set ORDER BY clause
	 *
	 * @access  public
	 * @param   string    column name
	 * @param   string    "ASC", "DESC"
	 * @return  this
	 */
	orderBy: function(column, order) {
		order = order || 'ASC';
		this._orderByClause = 'ORDER BY ' + column + ' ' + order;
		return this;
	},
	
	/**
	 * Set LIMIT clause
	 *
	 * @access  public
	 * @param   number    the number to offset by
	 * @param   number    the number of rows to select
	 * @return  this
	 */
	limit: function(offset, rowCount) {
		if (arguments.length === 1) {
			rowCount = offset;
			offset = 0;
		}
		this._limitClause = 'LIMIT ' + rowCount + (offset ? ' OFFSET ' + offset : '');
		return this;
	},
	
	/**
	 * Finishes up, builds the query, and calls _onDone
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	done: function(callback) {
		this._onDone(this._buildQuery(), callback);
	},
	
	/**
	 * Builds the query
	 *
	 * @access  public
	 * @return  string
	 */
	_buildQuery: function() {
		var self = this;
		var forInsert = this._forInsert;
		var query = 'SELECT ' + (forInsert ? (function() {
			var fields = [ ];
			self._fields.forEach(function(field) {
				fields.push(self._table + '.' + field);
			});
			return fields.join(',');
		}()) : this._fields.join(','));
		query += ' FROM ' + this._table;
		if (this._whereClause) {
			if (typeof this._whereClause === 'string') {
				query += ' WHERE ' + this._whereClause;
			} else {
				query += ' WHERE ' + (function(where) {
					var result = [ ];
					for (var i in where) {
						if (where.hasOwnProperty(i)) {
							var field = forInsert ? self._table + '.' + i : i;
							if (Array.isArray(where[i])) {
								where[i][1] = escape(where[i][1]);
								result.push(field + where[i].join(''));
							} else {
								result.push(field + '=' + escape(where[i]));
							}
						}
					}
					return result.join(' AND ');
				}(this._whereClause));
			}
		}
		if (this._orderByClause) {
			query += ' ' + this._orderByClause;
		}
		if (this._limitClause) {
			query += ' ' + this._limitClause;
		}
		return query;
	},
	
	/**
	 * Run the query
	 *
	 * @access  public
	 * @param   string    the query
	 * @param   function  callback
	 * @return  void
	 */
	_run: function(query, callback) {
		this._connection.query(query, callback, 'select');
	}
	
});

// ------------------------------------------------------------------

/**
 * Builds INSERT INTO queries
 */
Class([module.exports, 'InsertQuery'], {
	
	_connection: null,
	
	_table: null,
	_fields: null,
	_values: null,
	
	/**
	 * Constructor
	 *
	 * @access  public
	 * @param   object    connection object
	 * @param   string    table name
	 */
	construct: function(connection, table) {
		this._connection = connection;
		this._table = table;
	},
	
	/**
	 * Used for INSERT INTO ... VALUES queries
	 *
	 * @access  public
	 * @param   object    the values
	 * @param   function  callback
	 * @return  void
	 */
	values: function(values, callback) {
		this._fields = [ ];
		values = Array.isArray(values) ? values : [values];
		for (var i in values[0]) {
			if (values[0].hasOwnProperty(i)) {
				this._fields.push(i);
			}
		}
		this._values = values;
		this._run(callback);
	},
	
	/**
	 * Used for INSERT INTO ... SELECT queries
	 *
	 * @access  public
	 * @param   mixed     fields
	 * @return  object
	 */
	select: function(fields) {
		var self = this;
		function onDone(query, callback) {
			self._select._builtQuery = query;
			self._run(callback);
		}
		this._fields = (typeof fields === 'string') ? fields.split(',').map(trim) : fields;
		// The select query object gets passed this instead of this._connection
		// because it does not need the connection object when used for an insert,
		// and it is more useful to have a reference back to the top-level query.
		self._select = new module.exports.SelectQuery(this, this._fields, onDone, true);
		return self._select;
	},
	
	/**
	 * Builds the actual query
	 *
	 * @access  public
	 * @return  string
	 */
	_buildQuery: function() {
		var self = this;
		if (this._select) {
			// Get the list of fields
			this._fields = this._fields.map(function(field) {
				return self._select._table + '.' + field;
			});
		}
		var query = 'INSERT INTO ' + this._table + ' (' + this._fields.join(',') + ') ';
		// INSERT INTO ... VALUES
		if (this._values) {
			query += 'VALUES';
			var values = [ ];
			this._values.forEach(function(row) {
				var rowValues = [ ];
				for (var i in row) {
					if (row.hasOwnProperty(i)) {
						rowValues.push(escape(row[i]));
					}
				}
				values.push(rowValues.join(','));
			});
			query += '(' + values.join('),(') + ')';
		}
		// INSERT INTO ... SELECT
		else if (this._select) {
			query += (this._select._builtQuery || this._select._buildQuery());
		}
		return query;
	},
	
	/**
	 * Run the constructed query
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	_run: function(callback) {
		this._connection.query(this._buildQuery(), callback, 'insertInto');
	}
	
});

// ------------------------------------------------------------------

/**
 * Builds UPDATE queries
 */
Class([module.exports, 'UpdateQuery'], {
	
	_connection: null,
	
	_table: null,
	
	_setClause: null,
	_whereClause: null,
	_orderByClause: null,
	_limitClause: null,
	
	/**
	 * Constructor
	 *
	 * @access  public
	 * @param   object    connection object
	 * @param   mixed     the table
	 */
	construct: function(connection, table) {
		this._connection = connection;
		this._table = table;
	},
	
	/**
	 * Set the SET clause
	 */
	set: function(values) {
		this._setClause = values;
		return this;
	},
	
	/**
	 * Set WHERE clause conditions
	 *
	 * @access  public
	 * @param   mixed     the conditions
	 * @return  this
	 */
	where: function(conditions) {
		this._whereClause = conditions;
		return this;
	},
	
	/**
	 * Set ORDER BY clause
	 *
	 * @access  public
	 * @param   string    column name
	 * @param   string    "ASC", "DESC"
	 * @return  this
	 */
	orderBy: function(column, order) {
		order = order || 'ASC';
		this._orderByClause = 'ORDER BY ' + column + ' ' + order;
		return this;
	},
	
	/**
	 * Set LIMIT clause
	 *
	 * @access  public
	 * @param   number    the number of rows to select
	 * @return  this
	 */
	limit: function(rowCount) {
		this._limitClause = 'LIMIT ' + rowCount;
		return this;
	},
	
	/**
	 * Finishes up, builds the query, and calls _onDone
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	done: function(callback) {
		this._run(this._buildQuery(), callback);
	},
	
	/**
	 * Builds the query
	 *
	 * @access  public
	 * @return  string
	 */
	_buildQuery: function() {
		var self = this;
		var query = 'UPDATE ' + this._table + ' SET ';
		if (typeof this._setClause === 'string') {
			query += this._setClause;
		} else {
			query += (function(set) {
				var result = [ ];
				for (var i in set) {
					if (set.hasOwnProperty(i)) {
						result.push(i + '=' + escape(set[i]));
					}
				}
				return result.join(', ');
			}(this._setClause));
		}
		if (this._whereClause) {
			if (typeof this._whereClause === 'string') {
				query += ' WHERE ' + this._whereClause;
			} else {
				query += ' WHERE ' + (function(where) {
					var result = [ ];
					for (var i in where) {
						if (where.hasOwnProperty(i)) {
							if (Array.isArray(where[i])) {
								where[i][1] = escape(where[i][1]);
								result.push(i + where[i].join(''));
							} else {
								result.push(i + '=' + escape(where[i]));
							}
						}
					}
					return result.join(' AND ');
				}(this._whereClause));
			}
		}
		if (this._orderByClause) {
			query += ' ' + this._orderByClause;
		}
		if (this._limitClause) {
			query += ' ' + this._limitClause;
		}
		return query;
	},
	
	/**
	 * Run the query
	 *
	 * @access  public
	 * @param   string    the query
	 * @param   function  callback
	 * @return  void
	 */
	_run: function(query, callback) {
		this._connection.query(query, callback, 'update');
	}
	
});

// ------------------------------------------------------------------

/**
 * Builds DELETE FROM queries
 */
Class([module.exports, 'DeleteFromQuery'], {
	
	_connection: null,
	
	_table: null,
	
	_whereClause: null,
	_orderByClause: null,
	_limitClause: null,
	
	/**
	 * Constructor
	 *
	 * @access  public
	 * @param   object    connection object
	 * @param   mixed     the table
	 */
	construct: function(connection, table) {
		this._connection = connection;
		this._table = table;
	},
	
	/**
	 * Set WHERE clause conditions
	 *
	 * @access  public
	 * @param   mixed     the conditions
	 * @return  this
	 */
	where: function(conditions) {
		this._whereClause = conditions;
		return this;
	},
	
	/**
	 * Set ORDER BY clause
	 *
	 * @access  public
	 * @param   string    column name
	 * @param   string    "ASC", "DESC"
	 * @return  this
	 */
	orderBy: function(column, order) {
		order = order || 'ASC';
		this._orderByClause = 'ORDER BY ' + column + ' ' + order;
		return this;
	},
	
	/**
	 * Set LIMIT clause
	 *
	 * @access  public
	 * @param   number    the number of rows to select
	 * @return  this
	 */
	limit: function(rowCount) {
		this._limitClause = 'LIMIT ' + rowCount;
		return this;
	},
	
	/**
	 * Finishes up, builds the query, and calls _onDone
	 *
	 * @access  public
	 * @param   function  callback
	 * @return  void
	 */
	done: function(callback) {
		this._run(this._buildQuery(), callback);
	},
	
	/**
	 * Builds the query
	 *
	 * @access  public
	 * @return  string
	 */
	_buildQuery: function() {
		var self = this;
		var query = 'DELETE FROM ' + this._table;
		if (this._whereClause) {
			if (typeof this._whereClause === 'string') {
				query += ' WHERE ' + this._whereClause;
			} else {
				query += ' WHERE ' + (function(where) {
					var result = [ ];
					for (var i in where) {
						if (where.hasOwnProperty(i)) {
							if (Array.isArray(where[i])) {
								where[i][1] = escape(where[i][1]);
								result.push(i + where[i].join(''));
							} else {
								result.push(i + '=' + escape(where[i]));
							}
						}
					}
					return result.join(' AND ');
				}(this._whereClause));
			}
		}
		if (this._orderByClause) {
			query += ' ' + this._orderByClause;
		}
		if (this._limitClause) {
			query += ' ' + this._limitClause;
		}
		return query;
	},
	
	/**
	 * Run the query
	 *
	 * @access  public
	 * @param   string    the query
	 * @param   function  callback
	 * @return  void
	 */
	_run: function(query, callback) {
		this._connection.query(query, callback, 'deleteFrom');
	}
	
});

// ------------------------------------------------------------------
//  Helpers

function buildCols(cols) {
	var result = [ ];
	var foreigns = [ ];
	var primary;
	for (var i in cols) {
		if (cols.hasOwnProperty(i)) {
			var col = cols[i];
			result.push([
				i,
				col.type,
				(col.notNull ? 'NOT NULL' : 'NULL'),
				(col.autoIncrement ? 'AUTO_INCREMENT' : ''),
				(col.hasOwnProperty('defaultValue') ? 'DEFAULT ' + (function(def) {
					if (typeof def === 'string') {
						return "'" + def + "'";
					}
					if (def === null || def === undefined) {
						return 'NULL';
					}
					return def;
				}(col.defaultValue)) : ''),
				(col.unique ? 'UNIQUE' : '')
			].join(' '));
			if (col.primary) {
				primary = i;
			}
			if (col.foreign) {
				var f = col.foreign;
				foreigns.push('FOREIGN KEY (' + i + ') REFERENCES ' +
					f.references[0] + '(' + f.references[1] + ') ON DELETE ' + (f.onDelete || 'CASCADE')
				);
			}
		}
	}
	return {
		cols: result,
		primary: primary || null,
		foreigns: foreigns
	};
}

function trim(str) {
	return str.trim();
}

/* End of file queries.js */
