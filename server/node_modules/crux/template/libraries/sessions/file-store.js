/**
 * File-based storage model
 */

// Load the class interface
var Class = require('classes').Class;

var FILE_STORE_PATH = __dirname + '/file-sessions/';
var stores = require('./stores');

var fs = require('fs');
var path = require('path');
var async = require('async');

/**
 * Does a simple meta lookup
 */
module.exports.readMeta = function(id, callback) {
	modifyFileJson(storeFile(id), readMeta, function(err, result) {
		stores._provideMeta(err, result, callback);
	});
};

/**
 * FileStore class
 */
Class([module.exports, 'FileStore']).extends(stores.SessionStore, {
	
	init: function(onready) {
		var self = this;
		this._storeFile = storeFile(this.id);
		path.exists(FILE_STORE_PATH, function(exists) {
			if (! exists) {
				try {
					fs.mkdirSync(FILE_STORE_PATH);
				} catch (err) {
					return onready(err);
				}
			}
			path.exists(self._storeFile, function(exists) {
				if (! exists) {
					var content = JSON.stringify(new stores.SessionData(self._handle));
					fs.writeFile(self._storeFile, content, function(err) {
						onready(err ? err : null);
					});
				} else {
					onready(null);
				}
			});
		});
	},
	
	set: function(key, value, callback) {
		if (! this._addToTransaction('set', key, value)) {
			modifyFileJson(this._storeFile, setter(key, value), callback);
		}
	},
	
	get: function(key, callback) {
		if (! this._addToTransaction('get', key, null)) {
			modifyFileJson(this._storeFile, getter(key), callback);
		}
	},
	
	unset: function(key, callback) {
		if (! this._addToTransaction('unset', key, null)) {
			modifyFileJson(this._storeFile, unsetter(key), callback);
		}
	},
	
	destroy: function() {
		destroySession(this.id);
	},
	
	commitTransaction: function(callback) {
		modifyFileJson(this._storeFile, committer(this), callback);
	},
	
	fetchMeta: function(callback) {
		modifyFileJson(this._storeFile, readMeta, callback);
	}

});

/**
 * Creates a new FileStore
 */
module.exports.create = function(id, handle, onready) {
	return new module.exports.FileStore(id, handle, onready);
};

module.exports.cleanup = function(callback) {
	fs.readdir(FILE_STORE_PATH, function(err, files) {
		if (err) {throw err;}
		async.parallel(files.map(function(file) {
			return function(done) {
				modifyFileJson(storeFile(file), function(data) {
					if (stores.isExpired(data.meta)) {
						destroySession(file);
					}
				}, done);
			}
		}), callback);
	});
};

// ------------------------------------------------------------------
//  Helpers

function destroySession(id) {
	fs.unlink(storeFile(id));
}

function readMeta(obj) { return obj.meta; }

function storeFile(id) {
	return FILE_STORE_PATH + id;
}

function committer(store) {
	return function(obj) {
		var result = { };
		for (var i = 0, c = store._runningTransaction.length; i < c; i++) {
			var current = store._runningTransaction[i];
			switch (current.action) {
				case 'get':
					stores._get(obj.storage, current.key, result);
				break;
				case 'set':
					stores._set(obj.storage, current.key, current.value);
				break;
				case 'unset':
					stores._unset(obj.storage, current.key);
				break;
			}
		}
		return result;
	};
}

function setter(key, value) {
	return function(obj) {
		return stores._set(obj.storage, key, value);
	};
}

function getter(key) {
	return function(obj) {
		return stores._get(obj.storage, key);
	};
}

function unsetter(key) {
	return function(obj) {
		return stores._unset(obj.storage, key);
	};
}

function modifyFileJson(file, func, callback) {
	callback = callback || function () { };
	process.nextTick(function() {
		fs.readFile(file, function(err, data) {
			if (err) {
				return callback(err);
			}
			data = JSON.parse(data.toString());
			var result = func(data);
			data = JSON.stringify(data);
			fs.writeFile(file, data, function(err) {
				return callback((err ? err : null), result);
			});
		});
	});
}

/* End of file file-store.js */
