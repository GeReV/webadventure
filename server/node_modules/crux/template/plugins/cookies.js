
$.plugins.bind('request', function(done, handle) {
	handle.cookies = new Cookies(handle);
	process.nextTick(done);
});

/**
 * Modified version of cookies {https://github.com/jed/cookies}
 */
var Cookies = (function() {
	var cache = {}

	function Cookies( handle, keys ) {
	  this.handle = handle;
	  this.request = handle.request
	  this.response = handle.response
	  this.keys = keys
	}

	Cookies.prototype = {
	  get: function( name, opts ) {
		var sigName = name + ".sig"
		  , header, match, value, remote, data, index
		  
		header = this.request.headers[ "cookie" ]
		if ( !header ) return    

		match = header.match( getPattern( name ) )
		if ( !match ) return
		
		value = match[ 1 ]
		if ( !opts || !opts.signed ) return value

		remote = this.get( sigName )
		if ( !remote ) return
		
		data = name + "=" + value    
		index = this.keys.index( data, remote )

		if ( index < 0 ) this.set( sigName, null, { path: "/" } )
		
		else {
		  index && this.set( sigName, this.keys.sign( data ) )
		  return value
		}
	  },
	  
	  set: function( name, value, opts ) {
		var res = this.response
		  , headers = this.handle.getResponseHeader('set-cookie')
		  , secure = res.socket.encrypted
		  , cookie = new Cookie( name, value, opts )
		  , header
		  
		if ( typeof headers == "string" ) headers = [ headers ]
		  
		if ( !secure && opts && opts.secure ) throw "Cannot send secure cookie over unencrypted socket"
		
		cookie.secure = secure
		headers.push( cookie.toHeader() )
		
		if ( opts && opts.signed ) {
		  cookie.value = this.keys.sign( cookie.toString() )
		  cookie.name += ".sig"
		  headers.push( cookie.toHeader() )
		}
		for (var i = 0, c = headers.length; i < c; i++) {
			this.handle.setResponseHeader('Set-Cookie: ' + headers[i]);
		}
		return this
	  }
	}

	function Cookie( name, value, attrs ) {
	  value || ( this.expires = new Date( 0 ) )

	  this.name = name
	  this.value = value || ""

	  for ( var name in attrs ) this[ name ] = attrs[ name ]
	}

	Cookie.prototype = {
	  path: "/",
	  expires: undefined,
	  domain: undefined,
	  httpOnly: true,
	  secure: false,

	  toString: function() { return this.name + "=" + this.value },
	  
	  toHeader: function() {
		var header = this.toString()
		
		if ( this.path      ) header += "; path=" + this.path
		if ( this.expires   ) header += "; expires=" + this.expires.toUTCString()
		if ( this.domain    ) header += "; domain=" + this.domain
		if ( this.secure    ) header += "; secure"
		if ( this.httpOnly  ) header += "; httponly"
		
		return header
	  }
	}

	function getPattern( name ) {
	  if ( cache[ name ] ) return cache[ name ]
	  
	  return cache[ name ] = new RegExp(
		"(?:^|;) *" +
		name.replace( /[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&" ) +
		"=([^;]*)"
	  )
	}

	return Cookies;
}());
