<h2>The handle Object</h2>
<p>
	The handle object has a lot of useful properties and methods. We will start by looking at it's input
	oriented properties and methods. This is just going to be a simple list of properties and methods with
	descriptions.
</p>
<hr />
<h3>Input</h3>
<dl>
	
	<dt>handle.timestamp</dt>
	<dd>
		<p>
			The <var>timestamp</var> property is a readonly value with a with a number timestamp representing
			when the request was recieved.
		</p>
	</dd>
	
	<dt>handle.request</dt>
	<dd>
		<p>
			The Node <a href="http://nodejs.org/docs/latest/api/http.html#http.ServerRequest">http.ServerRequest</a>
			object for the request.
		</p>
	</dd>
	
	<dt>handle.scheme</dt>
	<dd>
		<p>
			The scheme of the request; Either <code>"http"</code> or <code>"https"</code>.
		</p>
	</dd>
	
	<dt>handle.method</dt>
	<dd>
		<p>
			The method of the request such as <code>"GET"</code> or <code>"POST"</code>.
		</p>
	</dd>
	
	<dt>handle.isAjax</dt>
	<dd>
		<p>
			A boolean flag determined by checking for a <code>X-Requested-With: XMLHttpRequest</code> header
			to signify an AJAX request.
		</p>
	</dd>
	
	<dt>handle.useragent</dt>
	<dd>
		<p>
			An object containing information about the user agent. This object might look something like this:
		</p>
		<%- pre('code', [
			'{ family: \'Chrome\',',
			'  major: \'19\',',
			'  minor: \'0\',',
			'  patch: \'1041\',',
			'  os: \'Linux\' }'
		]) %>
		<p>
			The object also has a method <var>handle.useragent.isMobile()</var> for determining mobile clients.
		</p>
		<p>
			<em>(Note: if you do not intend to use the useragent object, you can turn off useragent parsing to
			save on response time. This is done by disabling the useragent plugin in the <code>plugins.json</code>
			config file.)</em>
		</p>
	</dd>
	
	<dt>handle.cookies</dt>
	<dd>
		<p>
			An object containing methods for getting and setting cookies.
		</p>
		<%- pre('code', [
			'var cookie = handle.cookies.get("name");',
			'',
			'handle.cookies.set("name", "value", {',
			'    expires: new Date(),',
			'    path: "/",',
			'    domain: null,',
			'    secure: false,',
			'    httpOnly: false',
			'});'
		]) %>
		<p>
			<em>(Note: if you do not intend to use the cookies object, you can turn off cookie parsing to
			save on response time. This is done by disabling the cookies plugin in the <code>plugins.json</code>
			config file.)</em>
		</p>
	</dd>
	
	<dt>handle.url</dt>
	<dd>
		<p>
			An object containing information about the URL produced by running Node's <a
			href="http://nodejs.org/docs/latest/api/url.html#url.parse">url.parse</a> method.
		</p>
	</dd>
	
	<dt>handle.params</dt>
	<dd>
		<p>
			If pattern routing is enabled (see the <a href="mvc">MVC section</a>), this will be an object containing
			URI params. Otherwise, this is <code>null</code>.
		</p>
	</dd>
	
	<dt>handle.baseUrl ( void )</dt>
	<dd>
		<p>
			The <var>baseUrl</var> method returns the value <var>base_url</var> from the appropriate
			config file (http or https).
		</p>
	</dd>
	
	<dt>handle.uriSegment ( number index )</dt>
	<dd>
		<p>
			Returns a specific segment of the request URI. For example, if the URI is <kbd>/foo/bar/baz</kbd>,
			calling <var>handle.uriSegment(2)</var> would return the second segment, or <code>"bar"</code>.
		</p>
	</dd>
	
	<dt>handle.get ( function callback )</dt>
	<dd>
		<p>
			Parses the query string and passes the resulting object to a callback.
		</p>
	</dd>
	
	<dt>handle.post ( function callback )</dt>
	<dd>
		<p>
			Parses the request body and passes it to a callback.
		</p>
	</dd>
	
	<dt>handle.requestHeader ( string header )</dt>
	<dd>
		<p>
			Returns the value of the given request header.
		</p>
	</dd>
	
	<dt>handle.requestHeaders ( void )</dt>
	<dd>
		<p>
			Returns an array containing all request headers.
		</p>
	</dd>
	
	<dt>
		handle.accepts &nbsp; &nbsp; &nbsp; &nbsp; ( string type )<br />
		handle.acceptsEncoding ( string type )<br />
		handle.acceptsLanguage ( string type )<br />
		handle.acceptsCharset &nbsp;( string type )
	</dt>
	<dd>
		<p>
			Parses the headers <code>Accept</code>, <code>Accept-Encoding</code>, <code>Accept-Language</code>,
			and <code>Accept-Charset</code> and returns a boolean; true if the given type is accepted and false
			if not.
		</p>
	</dd>
	
</dl>
<hr />
<h3>Output</h3>
<dl>
	
	<dt>handle.response</dt>
	<dd>
		<p>
			The Node <a href="http://nodejs.org/docs/latest/api/http.html#http.ServerResponse">http.ServerResponse</a>
			object for the request.
		</p>
	</dd>
	
	<dt>handle.status ([ number status ])</dt>
	<dd>
		<p>
			If a status is given, set the response status to the given value. Returns the response status.
		</p>
	</dd>
	
	<dt>
		handle.loadView &nbsp; &nbsp; &nbsp;( string view, object data, boolean forceFresh, function callback )<br />
		handle.loadViewSync &nbsp;( string view, object data, boolean forceFresh )
	</dt>
	<dd>
		<p>
			Loads a views contents and returns/passes those contents.
		</p>
	</dd>
	
	<dt>
		handle.renderView &nbsp; &nbsp; &nbsp;( string view, object data, boolean forceFresh, function callback )<br />
		handle.renderViewSync &nbsp;( string view, object data, boolean forceFresh )
	</dt>
	<dd>
		<p>
			Loads a views contents and buffers those contents for outputting.
		</p>
	</dd>
	
	<dt>handle.setOutput ( mixed output )</dt>
	<dd>
		<p>
			Buffers some output overwriting any previously buffered.
		</p>
	</dd>
	
	<dt>handle.appendOutput ( mixed output )</dt>
	<dd>
		<p>
			Appends some content to the output buffer.
		</p>
	</dd>
	
	<dt>handle.responseHeaders ( void )</dt>
	<dd>
		<p>
			Fetches a list of all buffered response headers.
		</p>
	</dd>
	
	<dt>handle.setResponseHeader ( string value[, boolean allowDuplicate = false ])</dt>
	<dd>
		<p>
			Set a response header. If the second parameter is given as true, duplicate headers will be allowed.
		</p>
	</dd>
	
	<dt>handle.getResponseHeader ( string header )</dt>
	<dd>
		<p>
			Fetch all of the values for a given response header.
		</p>
	</dd>
	
	<dt>handle.unsetResponseHeader ( string header )</dt>
	<dd>
		<p>
			Unset all instances of a given response header.
		</p>
	</dd>
	
	<dt>handle.send ( void )</dt>
	<dd>
		<p>
			Send all buffered content and close the connection.
		</p>
	</dd>
	
	<dt>handle.redirect ( string location[, string scheme ])</dt>
	<dd>
		<p>
			Sends a 303 redirect to the client for the given location url (relative or absolute). If the url is
			relative, it will be resolved from the base url defined in the appropriate config file (<code>http</code>
			or <code>https</code>, depending on the scheme of the request). If a second parameter is given, it
			will override the request scheme and resolve relative to that config file's <var>base_url</var> value.
		</p>
	</dd>
	
</dl>
