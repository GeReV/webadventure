<h2>Getting Starting</h2>
<p>
	Before you get started with Crux, you need to have Node and npm installed on your system. You can find
	instructions on how to do that on <a href="http://cruxjs.com/download">the Crux website</a>. Once you have
	done that, Crux can be installed with the following command.
</p>
<%- pre(cmd('npm install crux -g')) %>
<p>
	With Crux installed, creating a new application is as easy as running a single command.
</p>
<%- pre(cmd('crux init your-project-name')) %>
<p>
	This will create a new project in the directory <code>./your-project-name</code>. To initialize your new
	project in the current directory instead, just omit the name parameter.
</p>
<%- pre(cmd('crux init')) %>
<p>
	Then you can start the application server using <kbd>crux start</kbd>, but first you must install the
	base dependencies using npm.
</p>
<%- pre([
	cmd('cd your-project-name'),
	cmd('crux npm install'),
	cmd('crux start')
]) %>
<p>
	By default, this will start an HTTP server running at <code>http://localhost:1337/</code>. Your new application
	will have several directories in it; The basic structure should look something like this:
</p>
<%- pre([
	'.',
	'├─ config',
	'├─ controllers',
	'├─ core',
	'├─ libraries',
	'├─ logs',
	'├─ migrations',
	'├─ models',
	'├─ node_modules',
	'├─ plugins',
	'├─ public',
	'├─ package.json',
	'└─ views'
]) %>
<p>
	Now, let's go over what each of these directories and files are for. First, look at the file called <code>package.json</code>.
	If you have experience with Node, you probably already know what this is for; This file describes your application. By default
	it should have the following content.
</p>
<%- pre('code', [
	'{',
	'  "author": "YOU &lt;YOU@example.com> (http://example.com)",',
	'  "name": "NEW-PROJECT",',
	'  "description": "A project created with crux",',
	'  "version": "0.0.0",',
	'  "repository": {',
	'	"url": ""',
	'  },',
	'  "engines": {',
	'	"node": ">=0.6.0"',
	'  },',
	'  "dependencies": {',
	'	"ejs": "0.4.3",',
	'	"mime": "1.2.4",',
	'	"useragent": "1.0.2",',
	'	"cookies": "0.1.6",',
	'	"classes": "0.1.6",',
	'	"mysql": "0.9.4"',
	'  },',
	'  "devDependencies": {}',
	'}'
]) %>
<p>
	Go ahead and put in a name, description, and author info. The version number you can change as you write your
	application and the repository you can add if you would like. Crux requires Node version 0.6+ so you should leave
	the engines section alone (unless your application specifically requires an even newer version). The dependencies
	section is important. When you want to make use of third-party modules available through npm, this is where you
	list those. The ones given above are the basics required for Crux's built-in systems to work.
</p>
<p>
	For a more complete overview of the <code>package.json</code> file, look at npm's online <a
	href="https://github.com/isaacs/npm/blob/master/doc/cli/json.md">package.json documentation</a>.
</p>
<hr />
<h3>config</h3>
<p>
	The config directory contains configuration files for controlling how aspects of your application work. The files
	are JSON format, but Crux uses a custom parser that allows you to use line comments so that you can document your
	config if you want. There are six configuration files by default: <code>core</code>, <code>db</code>, <code>http</code>,
	<code>https</code>, <code>plugins</code>, and <code>sessions</code>. Let's take a look at the HTTP config file.
</p>
<%- pre('code', [
	'//',
	'// HTTP config file',
	'//',
	'',
	'{',
	'    // Run an HTTP server?',
	'    "active": true,',
	'',
	'    // What address should HTTP be run on? (default: "127.0.0.1")',
	'    "address": "127.0.0.1",',
	'',
	'    // What port should HTTP be run on? (default: 80)',
	'    "port": 1337,',
	'',
	'    // The base URL of the application WITH a trailing slash',
	'    "base_url": "http://localhost:1337/",',
	'',
	'    // What controller should be default if none is given?',
	'    "default_controller": "welcome",',
	'',
	'    // The default mime type to send from controllers (auto-determined for /public files)',
	'    "default_content_type": "text/html",',
	'',
	'    // Should output be gzip encoded if supported?',
	'    "compress_content": true,',
	'',
	'    // Use ETag based caching for /public files?',
	'    "etag_publics": true',
	'}',
	'',
	'// End of file http.json',
	'// Location: ./config/http.json'
]) %>
<p>
	The first value there is just a true/false flag that controls if an HTTP server is started. This is there
	so you can control if you want to run HTTP, HTTPS, or both (note that the HTTPS configuration file is
	almost identical to the HTTP file, just for HTTPS). The <var>address</var> and <var>port</var> values
	control where the server listens for requests; Usually you want localhost (<code>127.0.0.1</code>), but
	you may want to change the port (80 is the usual port for HTTP requests). The <var>base_url</var> value
	should be the URL that the server is running on.
</p>
