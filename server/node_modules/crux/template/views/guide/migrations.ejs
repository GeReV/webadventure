<h2>Migrations</h2>
<p>
	Crux uses the open source <a href="https://github.com/visionmedia/node-migrate">node-migrate</a> to manage
	migrations in applications through the <kbd>crux migrate</kbd> subcommand. Migrations are an easy way for
	you to manage changes to your database structure (or other similar structures you may be using) throughout
	the development of your application. For example, if your application has a table for storing user data and
	you decide later on that you want to store user email addresses as well as there other info, it could be
	difficult to make sure that older versions of the database structure all get updated correctly when adding
	this new column to your table. Migrations allow you to define the updating (and reversal) routine in a
	simple way.
</p>
<p>
	To create a migration you use <kbd>crux migrate create</kbd>. Optionally, you can also give your migration
	a name to easily identify it.
</p>
<%- pre('<samp>$</samp> <kdb>crux migrate create [name]</kdb>') %>
<p>
	This creates a new file in your <code>./migrations</code> directory for your migration. The first time you
	run this, the file will be something like <code>000-name.js</code>, next will be <code>001-name.js</code>,
	etc. After running <kbd>create</kbd>, your new migration file will look like this.
</p>
<%- pre('code', [
	'',
	'// Load the database library',
	'var db = $.libs.require(\'db\');',
	'',
	'// ------------------------------------------------------------------',
	'',
	'exports.up = function(next) {',
	'	var dbconn = db.open();',
	'	dbconn.runTransaction(function(commit, rollback) {',
	'',
	'		// Your migration goes here',
	'',
	'		commit(function(err) {',
	'			db.close(dbconn);',
	'			if (err) {throw err;}',
	'			next();',
	'		});',
	'',
	'	});',
	'};',
	'',
	'// ------------------------------------------------------------------',
	'',
	'exports.down = function(next) {',
	'	var dbconn = db.open();',
	'	dbconn.runTransaction(function(commit, rollback) {',
	'',
	'		// Your migration goes here',
	'',
	'		commit(function(err) {',
	'			db.close(dbconn);',
	'			if (err) {throw err;}',
	'			next();',
	'		});',
	'',
	'	});',
	'};',
	''
]) %>
<p>
	You will notice that there are two functions defined here; These are the migration functions. The
	<var>up</var> function is used to make new changes and the <var>down</var> function reverses the
	process. At the end of each of the function there is a call to the function <var>next()</var> which
	tells migrate that this migration is done. The rest is just the <a href="#db">database library</a>.
	Once you have built your migration file to create the new structure, you can run the migration using
	<kbd>crux migrate</kbd>.
</p>
<%- pre(cmd('crux migrate [up|down] [to]')) %>
<p>
	Running if you do not supply a direction argument (<kbd>up</kbd> / <kbd>down</kbd>) it will default to
	using <kbd>up</kbd>. You can also supply another parameter to specify how many migrations should be made.
	For example, instead of migrating all the way, you may only want to run the first migration.
</p>
<%- pre([
	cmd('crux migrate up 000.js'),
	'<samp>up : migrations/000.js',
	'migration : complete</samp>'
]) %>
<p>
	That would run migrations up to (and including) <code>000.js</code>. The same can be used going down to
	only undo some migrations, such as to remove a migration with a bug in it.
</p>
