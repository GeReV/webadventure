<h2>Sessions Library</h2>
<p>
	Crux comes with a built-in sessions library to ease the creation of your applications. To use the sessions
	library, you must first make sure the <code>cookies</code> plugin is enabled in the
	<code>./config/plugins.json</code> config file. Then, you can load the sessions library using
	<var>$.libs.require</var>.
</p>
<%- pre('code', 'var sessions = $.libs.require("sessions");') %>
<p>
	Once loaded, you must initialize the session using <var>sessions.open()</var>.
</p>
<%- pre('code', [
	'var sessions = $.libs.require("sessions");',
	'',
	'module.exports = {',
	'    index: function(handle) {',
	'        var sess = sessions.open(handle, function(err) {',
	'            if (err) { /* ... */ }',
	'',
	'            // You can now access this session using `sess` or `handle.session`',
	'',
	'        });',
	'    }',
	'};'
]) %>
<p>
	<em>(Note: as of version 0.1.8, there is a <code>sessions</code> plugin that will automatically create a session
	for every incoming request.)</em>
</p>
<dl>
	
	<dt>sess.id</dt>
	<dd>
		<p>
			The session ID. (<em>readonly</em>)
		</p>
	</dd>
	
	<dt>
		sess.set ( string key, mixed value, function callback )<br />
		sess.set ( object values, function callback )
	</dt>
	<dd>
		<p>
			Store a value in the session.
		</p>
		<%- pre('code', [
			'// Set a value in the session',
			'sess.set("foo", "bar", function(err) {',
			'    if (err) {throw err;}',
			'    ...',
			'});',
			'',
			'// Set multiple values in the session',
			'sess.set({ foo: "abc", bar: "def" }, function(err) {',
			'    if (err) {throw err;}',
			'    ...',
			'});'
		]) %>
	</dd>
	
	<dt>
		sess.get ( string key, function callback )<br />
		sess.get ( array keys, function callback )
	</dt>
	<dd>
		<p>
			Retrieve a value from the session.
		</p>
		<%- pre('code', [
			'// Read a value from the session',
			'sess.get("foo", function(err, foo) {',
			'    if (err) {throw err;}',
			'    ...',
			'});',
			'',
			'// Read multiple values from the session',
			'sess.get(["foo", "bar", "baz"], function(err, data) {',
			'    if (err) {throw err;}',
			'',
			'    // data = {',
			'    //   foo: ...,',
			'    //   bar: ...,',
			'    //   baz: ...',
			'    // }',
			'',
			'});'
		]) %>
	</dd>
	
	<dt>
		sess.unset ( string key, function callback )<br />
		sess.unset ( array keys, function callback )
	</dt>
	<dd>
		<p>
			Remove a value in the session.
		</p>
		<%- pre('code', [
			'// Remove a value from the session',
			'sess.unset("foo", function() {',
			'    ...',
			'});'
		]) %>
	</dd>
	
	<dt>sess.destroy ( void )</dt>
	<dd>
		<p>
			Destroy the session. <em>This function may or may not be asynchronous. Read as "mark for destruction".</em>
		</p>
		<%- pre('code', [
			'// Destroy the session',
			'sess.destroy();'
		]) %>
	</dd>
	
	<dt>sess.startTransaction ( void )</dt>
	<dd>
		<p>
			Starts a change transaction. This can be useful to avoid nestins a lot of callbacks or to avoid interacting
			with the actual store as frequently (such as repeatedly re-reading and re-writing a file store when a single
			read/write operation will work).
		</p>
	</dd>
	
	<dt>sess.commitTransaction ( function callback )</dt>
	<dd>
		<p>
			Commit the running change transaction.
		</p>
	</dd>
	
	<dt>sess.cancelTransaction ( void )</dt>
	<dd>
		<p>
			Cancel the running change transaction discarding all queued updates.
		</p>
	</dd>
	
</dl>
<p>
	Here is an example of using a transaction to compact three operations into a single I/O operation.
</p>
<%- pre('code', [
	'var sess = sessions.open(handle);',
	'',
	'sess.startTransaction();',
	'',
	'sess.set("foo", "bar");',
	'sess.set("abc", "def");',
	'',
	'sess.unset("baz");',
	'',
	'sess.commitTransaction(function() {',
	'    ...',
	'});'
]) %>
<h3>Sessions Database Table</h3>
<p>
	If you are storing your session data in a database, the following would create the appropriate database structure
	for session data.
</p>
<%- pre('code', [
	'CREATE TABLE sessions (',
	'    id varchar(36) DEFAULT \'0\' NOT NULL,',
	'    ip_address varchar(16) DEFAULT \'0\' NOT NULL,',
	'    user_agent varchar(100) DEFAULT \'0\' NOT NULL,',
	'    last_activity int(10) unsigned DEFAULT 0 NOT NULL,',
	'    storage text NOT NULL,',
	'    PRIMARY KEY (id)',
	');'
]) %>
