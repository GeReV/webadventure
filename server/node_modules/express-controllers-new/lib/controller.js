
/*!
 * Express - Controllers
 * Copyright(c) 2011 Nicholas Penree <drudge@conceited.net>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var express = require('express')
  , resource = require('express-resource')
  , readdir = require('fs').readdirSync
  , filestat = require('fs').statSync
  , join = require('path').join
  , extname = require('path').extname;

/**
 * Define resources for all controllers defined in your `controllers` directory
 *
 * This method will create an express resource for all files in your `controllers path`
 * setting, defaulting to `'/../../controllers/'`.
 * @param {Object} Express app
 * @return {Resource}
 * @api public
 */

module.exports =
express.HTTPServer.prototype.controllers =
express.HTTPSServer.prototype.controllers = function(app){
  var loaded = []
    , self = app || this
    , controllerPath = self.set('controllers path') || __dirname + '/../../../controllers'
    , controllerDefault = self.set('controllers default') || 'default';


  // We rely on express-resource; if it's not here, we don't go any farther 
  if (typeof self.resource == 'undefined')
  {
     console.error('express-resource is not loaded');
     process.exit(1);
  }


  // If nodefault is set, we don't care about handling the default routing
  if (!self.set('controllers nodefault'))
  {  
    try {
      if (filestat(controllerPath + '/' + controllerDefault + '.js').isFile())
      {
        loaded.push(controllerDefault);
        loaded[controllerDefault] = self.resource(controllerDefault, require(join(controllerPath, controllerDefault)));
        // fallback for the default controller - doubleunderscore to (hopefully) prevent
        // anything from stepping on our default path
        loaded['__default'] = self.resource('', require(join(controllerPath, controllerDefault)));
      }
    } catch (e) 
    {
      console.error("the default controller could not be found");
      process.exit(1);
    }
  }

  // Auto-load the controllers.
  // This should be an option, not the default - plan to deprecate in future versions
  readdir(controllerPath).forEach(function(file){
    if ((file.match(/^.*\.js$/ig)) && !(loaded[controller])) {
      var controller = file.replace(extname(file), '');
      loaded.push(controller);
      loaded[controller] = self.resource(controller, require(join(controllerPath, controller)));
    }
  });


  // We need to catch 404s, and default routing doesn't get us there. Connect's http.next(err) 
  // will catch and finalize the error if we don't do something about it.
  self.all('*', function(req,res) {
   
        function routeNotFound(req,res){
            this.message = req.url + ': route not found';
            this.code = 404;
            Error.call(this.msg);
            Error.captureStackTrace(this,arguments.callee);
        }
        routeNotFound.prototype.__proto__ = Error.prototype;

        throw new routeNotFound(req,res);
    });

  return loaded;
};


